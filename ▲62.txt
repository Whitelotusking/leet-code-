int uniquePaths(int m, int n)
{
    int**res=malloc(sizeof(int*)*n);//申请二维数组空间
    for(int i=0;i<n;i++)
    {
        res[i]=malloc(sizeof(int)*m);
    }
    for(int i=0;i<m;i++) res[0][i]=1;//初始化二维数组
    for(int i=0;i<n;i++) res[i][0]=1;//初始化二维数组
    if(m>=2&&n>=2)//根据递推公式可得从2x2的矩阵开始才需要运用到递推公式
    {
      for(int i=1;i<m;i++)
      {
          for(int j=1;j<n;j++)
          {
              res[j][i]=res[j-1][i]+res[j][i-1];
          }
      }
    }
    
    return res[n-1][m-1];
}
时间复杂度:O(nxm)
空间复杂度:O(nxm)
题解:
1.DP数组的含义
根据题意，把DP数组的每个值表示为走到该处一共有dp[i][j]种不同的路径
2.递推公式
根据1可得，当走到第dp[i][j]个位置的时候，可知dp[i][j]是由上方单元格和左方单元格推出的
即dp[i][j]=dp[i-1][j]+dp[i][j-1]
3.初始化dp数组
根据2x2最简单的矩阵可知，要推出右下角单元的路径走法，需要将最上一行和最左边一列进行初始化为1，因为此时
往右或者往下走只有一种走法。
4.遍历
由于初始化的关系，所以遍历的时候从非一种走法的单元格开始遍历进行状态转移
5.打印dp数组